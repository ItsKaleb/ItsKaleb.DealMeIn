@startuml "Start amd Play Game"

actor Player
participant GameClient
box GameServer
	participant GameHub << (C,#ADDA8A) >>
	participant RoomMarshalHandler << (C,#ADDA8A) >>
	participant GamesService << (C,#ADDA8A) >>
	queue GameRoomSaga #LightBlue
	queue GameLogicSaga #LightBlue
	database GameStateRepository #LightYellow
end box

box "GameLogic.dll"
	participant GameSetupHandler << (C,#ADDA8A) >>
	participant GameStepHandler << (C,#ADDA8A) >>
	participant GameLogicService << (C,#ADDA8A) >>
end box

== Start Game ==

Player -> GameClient: Click "start game"
activate GameHub
	GameClient -> GameHub: [POST] /game/start/{roomId}
	GameHub -> GamesService: StartGame(roomId)
	GamesService --> GameRoomSaga: GameStartedEvent
	
	' Game setup
	GameRoomSaga --> GameSetupHandler: Handles<GameStartedEvent>
	activate GameSetupHandler
		GameSetupHandler -> GameSetupHandler: Perform game setup
		GameSetupHandler -> GameStateRepository: StoreGameState(roomId, gameStateDto)
		GameSetupHandler --> GameLogicSaga: GameStepCompletedEvent (gameStep=setup)
	deactivate GameSetupHandler

	' Marshal players in room
	activate RoomMarshalHandler
		GameRoomSaga --> RoomMarshalHandler: Handles<GameStartedEvent>
		RoomMarshalHandler -> GameHub: SendAll(roomId) \n- Move into active game
		GameLogicSaga --> RoomMarshalHandler: Handles<GameStepCompletedEvent>
		RoomMarshalHandler -> GameHub: SendAll(roomId) \n- Update game state for all clients
	deactivate RoomMarshalHandler

	GameHub -> GameStateRepository: Get current game state
	GameHub <- GameStateRepository: gameStateDto
	GameHub -> GameClient: Send updated game state to clients
deactivate GameHub

== Gameplay ==

group loop
	GameLogicSaga --> GameStepHandler: Handles<GameStepCompletedEvent>
	GameStepHandler -> GameLogicService: OnGameStep(gameStepCounter)
	GameLogicService -> GameLogicService
	note left
		Perform actions for 
		current game step
		including wait for
		player input
	endnote
	GameLogicService -> GameStateRepository: StoreGameState(roomId, gameStateDto)
	GameLogicService --> GameLogicSaga: GameStepCompleted

	activate RoomMarshalHandler
		GameLogicSaga --> RoomMarshalHandler: Handles<GameStepCompletedEvent>
		RoomMarshalHandler -> GameHub: SendAll(roomId) \n- Update game state for all clients
	deactivate RoomMarshalHandler

	GameHub -> GameStateRepository: Get current game state
	GameHub <- GameStateRepository: gameStateDto
	GameHub -> GameClient: Send updated game state to clients
end

@enduml